#!/usr/bin/env bash

function agf () { ag -G ".*$1\$" $2 }

# Create a new directory and enter it
function mkd() { mkdir -p "$@" && cd "$_"; }

function tre() {
tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

function fzf-git-branches() { git branch | fzf-tmux -d 15; }

# with ag - respects .agignore and .gitignore
function agi() { ag --nobreak --nonumbers --noheading . | fzf; }

# Syntax-highlight JSON strings or files
function json() {
	if [ -p /dev/stdin ]; then
		# piping, e.g. `echo '{"foo":42}' | json`
		python -mjson.tool | pygmentize -l javascript
	else
		# e.g. `json '{"foo":42}'`
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	fi
}

# --------------------
# Password Store utils
# --------------------

# List all filenames under .pasword-store directory in a
# Turn filenames into a readable input for pass command
_pwdstore-files() {
  find $HOME/.password-store -type f \
    | sed 's/.*\(\.password-store\/.*\)/\1/' \
    | grep -v '/\.' \
    | cut -d / -f2- \
    | rev \
    | cut -d . -f2- \
    | rev
}

# pass copy
pc() {
  local files pwdstore_file
  files=$(_pwdstore-files)
  pwdstore_file=$(echo $files | fzf)
  pass -c $(echo "$pwdstore_file")
}

# pass show
pd() {
  local files pwdstore_file
  files=$(_pwdstore-files)
  pwdstore_file=$(echo $files | fzf)
  pass show $(echo "$pwdstore_file")
}

# pass edit
pe() {
  local files pwdstore_file
  files=$(_pwdstore-files)
  pwdstore_file=$(echo $files | fzf)
  pass edit $(echo "$pwdstore_file")
}

# ---
# Git
# ---

# fbr - checkout git branch
# fbr() {
#   local branches branch
#   branches=$(git branch -vv) &&
#     branch=$(echo "$branches" | fzf +m) &&
#     git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
# }

# fbr - checkout git branch (including remote branches)
# fbr() {
#   local branches branch
#   branches=$(git branch --all | grep -v HEAD) &&
#     branch=$(echo "$branches" |
#   fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
#     git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
# }

# Fuzzy search over git branches ordered by recency
fbr () {
    git checkout $(git for-each-ref --sort=-committerdate refs/heads/ | awk '{print $3}' | cut -c $(echo " refs/head/" | wc -c)- | fzf-tmux)
}

# fco - checkout git branch/tag
fco() {
  local tags branches target
  tags=$(
  git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
  branches=$(
  git branch --all | grep -v HEAD             |
  sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
  sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
  target=$(
  (echo "$tags"; echo "$branches") |
  fzf-tmux -l30 -- --no-hscroll --ansi +m -d "\t" -n 2) || return
  git checkout $(echo "$target" | awk '{print $2}')
}

# fstash - easier way to deal with stashes
# type fstash to get a list of your stashes
# enter shows you the contents of the stash
# ctrl-d shows a diff of the stash against your current HEAD
# ctrl-b checks the stash out as a branch, for easier merging
fstash() {
  local out q k sha
  while out=$(
    git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
    fzf --ansi --no-sort --query="$q" --print-query \
      --expect=ctrl-d,ctrl-b);
  do
    mapfile -t out <<< "$out"
    q="${out[0]}"
    k="${out[1]}"
    sha="${out[-1]}"
    sha="${sha%% *}"
    [[ -z "$sha" ]] && continue
    if [[ "$k" == 'ctrl-d' ]]; then
      git diff $sha
    elif [[ "$k" == 'ctrl-b' ]]; then
      break;
    else
      git stash show -p $sha
    fi
  done
}

# Fasd
# v() {
#   local file
#   file="$(fasd -Rfl "$1" | fzf -1 -0 --no-sort +m)" && nvim "${file}" || return 1
# }

# Tmux

function tmsession () {
  tmux -2 new-session -s $1
}

function silver-presto () {
  cat $1 | ssh silver10 presto | less -SFX
}

# VPN

function vpn_us0 () {
  sudo openvpn /etc/openvpn/us197.nordvpn.com.tcp443.ovpn
}

function vpn_us1 () {
  sudo openvpn /etc/openvpn/us108.nordvpn.com.tcp443.ovpn
}

function vpn_us2 () {
  sudo openvpn /etc/openvpn/us3.nordvpn.com.tcp443.ovpn
}

function vpn_us3 () {
  sudo openvpn /etc/openvpn/us20.nordvpn.com.tcp443.ovpn
}

function vpn_us4 () {
  sudo openvpn /etc/openvpn/us501.nordvpn.com.tcp443.ovpn
}

function vpn_us () {
  vpn_us0
}

function vpn_fr () {
  # TODO: randomly choose a server
  sudo openvpn /etc/openvpn/fr9.nordvpn.com.tcp443.ovpn
}

function vpn_fr1 () {
  sudo openvpn /etc/openvpn/fr21.nordvpn.com.tcp443.ovpn
}

function vpn () {
  vpn_us
}

